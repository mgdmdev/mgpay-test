doctype html
html
  head
    title #{title}
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css")
    style.
      .order-card {
        transition: all 0.3s;
      }
      .order-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
      }
  body
    .container.py-5
      .row.mb-5
        .col-12
          h1.display-4 mgPay Test App
          p.lead A simple app to test mgPay integration with real payment workflows
          hr
      
      .row.mb-5
        .col-md-6
          .card.shadow-sm
            .card-header.bg-primary.text-white
              h3 Create New Order
            .card-body
              form(action="/order" method="POST")
                .mb-3
                  label.form-label(for="amount") Amount (GHS)
                  input.form-control#amount(type="number" name="amount" min="1" step="0.01" required)
                  small.form-text.text-muted This will be converted to pesewas (x100) for payment processing
                
                .mb-3
                  label.form-label(for="customer") Customer Name
                  input.form-control#customer(type="text" name="customer" required)
                
                button.btn.btn-primary.w-100(type="submit") Create Order
        
        .col-md-6
          .card.shadow-sm
            .card-header.bg-secondary.text-white
              h3 Test Functions
            .card-body
              p Use these tools to test different aspects of the MGPay integration
              a.btn.btn-outline-primary.w-100.mb-2(href="/test-webhook") Test Webhook Reception
      
      if orders && orders.length > 0
        .row.mb-3
          .col-12
            h2 Recent Orders
            p Click on an order to view details
        
        .row
          each order in orders
            .col-md-4.mb-4
              .card.order-card(class=`border-${order.status === 'completed' ? 'success' : order.status === 'pending' ? 'warning' : 'primary'}`)
                .card-header
                  strong Order ##{order.id.substring(0, 8)}
                .card-body
                  p.card-text
                    strong Amount: 
                    | GHS #{order.amount}
                  p.card-text
                    strong Status: 
                    span(class=`badge bg-${order.status === 'completed' ? 'success' : order.status === 'pending' ? 'warning' : 'primary'}`) #{order.status}
                  p.card-text
                    strong Customer: 
                    | #{order.customer}
                  a.btn.btn-sm.btn-outline-secondary(href=`/order/${order.id}`) View Details
      else
        .row
          .col-12
            .alert.alert-info No orders created yet. Create your first order to begin testing!
      
      .row.mt-5
        .col-12
          .card.bg-light
            .card-body
              h3 How This Test App Works
              ol
                li Create an order with an amount and customer name
                li Choose a payment provider (Paystack or Flutterwave)
                li App will simulate the payment flow
                li In production, the provider would send a webhook to MGPay
                li MGPay would then forward the webhook to your app
                li Your app handles the webhook and updates the order status
    
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js")